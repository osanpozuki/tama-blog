<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>たま</title>
    <link>https://osanpozuki.github.io/tama-blog/</link>
    <description>Recent content on たま</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sat, 26 Jan 2019 10:21:06 +0900</lastBuildDate>
    
	<atom:link href="https://osanpozuki.github.io/tama-blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue.jsのお勉強中だよ</title>
      <link>https://osanpozuki.github.io/tama-blog/posts/20190126/</link>
      <pubDate>Sat, 26 Jan 2019 10:21:06 +0900</pubDate>
      
      <guid>https://osanpozuki.github.io/tama-blog/posts/20190126/</guid>
      <description>はじめに 最近はVue.jsを勉強し始めました。
「えっ、初心者はHTMLとCSSとjQueryからやれよ」みたいな声もありそうですけど、「jQueryは廃れ気味でVue.js、React、Angularの3大jsフレームワークの時代ですよ」みたいな記事がたくさんあって、私のjQueryへの思いは最早塵同然です。さよならjQuery。
そんな3大フレームワークの中で私がVue.jsを選んだ理由は単純にGoogleトレンド↓
Google トレンド
https://g.co/trends/XQcLZ
エンジニアさん達が今勉強してる分野、絶対面白いじゃないですか。
環境作るよ GitHubに上げて色んな人に触ってもらう練習に、ついでなのでdockerなるものを見よう見まねで触ります。超参考になった記事はこちら。
本当にdockerは何も分からないのですがdocker-composeコマンドを使うやり方が楽そうなのでDockerfileとdocker-compose.ymlを書きます。結構バージョン周りの違いがあったのでtry&amp;amp;errorで修正も少ししました。
最初にDockerfile。色々調べてこんな感じに。
FROM node:10.15.0-alpine WORKDIR /app RUN apk update RUN npm install -g @vue/cli  次にdocker-composer.yml。正直良く分かりません・・・
version: &#39;3&#39; services: first-vue: container_name: first-vue build: . ports: - 8080:8080 volumes: - .:/app tty: true  shellで以下のコマンドを順番に実行します。
$ docker-compose build $ docker-compose up -d $ docker-compose exec first-vue sh  そしたらcontainer内部のshellに入れるので(最高に自分でも何言ってるか分からない)以下のように進めます。
$ vue create . ? Your connection to the default npm registry seems to be slow.</description>
    </item>
    
    <item>
      <title>11日でProgate完走した女の死闘</title>
      <link>https://osanpozuki.github.io/tama-blog/posts/20190119/</link>
      <pubDate>Sat, 19 Jan 2019 10:03:16 +0900</pubDate>
      
      <guid>https://osanpozuki.github.io/tama-blog/posts/20190119/</guid>
      <description>こんにちは、たまです。初ノートです(でした)。
プログラミングを始めてProgateってサイトで頑張った話と感想をまとめます。
どうしてプログラミングを始めたか 単純に気分です。(笑)
私は元々パソコンを結構触る人間で、かつ頭を使うパズルとか好きだったので、少し興味を持ってからは一瞬でハマりました！
Progateを始めて とりあえずprogate?って言うのを始めればいいっぽい？
明日仕事終わったら始めよー✨
&amp;mdash; たま@駆け出しエンジニア (@osanpozuki) January 8, 2019  初心者は今はProgateを始めるのが普通みたいだったのですぐに始めました。私は社会人なので平日はできる日は約4時間、休日は約12時間ずっとWeb版のProgateをやってました。(iOS版を最初やっていたのですが、選択式なのであまり身につかないなというのが私の感想です)
そして始めて11日目の今日！ついに全コースを終わらせることができましたo(^▽^)o
写真添付するの忘れてたのでもう一回
progate全コースやったので引退します
11日かかりました#Progate pic.twitter.com/gUb5ZFBbKh
&amp;mdash; たま@駆け出しエンジニア (@osanpozuki) January 19, 2019  Progateの良さ Progateの良さは主に以下の3点だと私は思います。
 資料のわかりやすさ 安さ(月額980円) 言語の選択肢  資料はもう本当に分かりやすいです。しかも説明の後すぐ演習に入るので頭にめちゃくちゃ入ってきます。
値段はドットインストールも月額980円みたいですが、サイトによっては月額4万円とか、中々決断に勇気がいるサイトもあるのでこの値段設定はとてもありがたかったです。
言語もたくさん用意してあったので全部やりましたが、「プログラミング言語は最初の一つを覚えれば他の言語はすぐ」って言われるのが納得できました。動的型付け言語がたくさんあって書き方も少し似ているものもあったので、最後の方は大体こんな書き方できるんじゃないかな〜みたいに雑に書いてみたりしてました(笑)
他にもレベル機能やTwitter連携もあったので、レベルがどんどん上がる様子を見て楽しんだり、Twitterで色んな人に進捗を褒めてもらえて楽しく進められました！
Progateの微妙なところ 正直いいところばかりではないので微妙だと思った点も紹介します。
 エディタの機能が貧弱 演習に対する答えが制限されている 説明が分かりやすさのために省かれている部分がある  エディタはrailsの授業なんかやると分かりますが、開きたいファイルを一々手で探して開くのは苦以外の何者でもありません。あとはmacで普段使えるペースト(ctrl+y)が使えないのも私はとてもしんどかったです。
そして演習ですが、例えばgitの授業で「index.htmlを作ってcommitの対象ファイルにしてください」に対し
$ touch index.html $ git add .  と解答すると不正解になります。他にもrailsで指定されてもいないインスタンス変数を用意しないと正解にならなかったり、rubyの関数でreturnを書かないと不正解になったり(←こればっかりは本当に意味わからない)なんで学校の先生のいう通りにしないといけないのと荒ぶったこともありましたo(｀ω´ )oｺﾗｰ
rubyの説明でもclass内部でインスタンス変数を設定するにはattr_accessorを使うことが説明されますが、attr_accessorが何をする機能なのか書かれていないため最初何この言語ってなりました。attr_accessorのリファレンス↓
https://ref.xaio.jp/ruby/classes/module/attr_accessor
Progateを終えて 愚痴も少し書いちゃいましたがなんだかんだ達成感もあり、980円でとても満足しました。色んな方に２週目をオススメされましたが前述の理由もあり、プログラミング言語はドキュメントを読んだり別の本で勉強したいと思ってます。
次も何か達成したらnote(ブログ)書きます。それでは！</description>
    </item>
    
  </channel>
</rss>